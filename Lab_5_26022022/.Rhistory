lda3
plda = predict(object = lda1, # predictions
newdata = iris[-train, ])
plda
head(plda$class) # classification result
head(plda$posterior, 3)
head(plda$x, 3) # LD projections
plda_plot <- cbind(train, predict(lda3)$x)
plda_plot
plda_df <- data.frame(plda_plot)
plda_df
# plda_df$Species <- iris$Species
# plda_df
# iris[c(1:4)]
iris_pca <- prcomp(iris[,c(1:4)], center = TRUE,scale. = TRUE)
pca_df <- data.frame(
pc1 = iris_pca$x[,1],
pc2 = iris_pca$x[,2],
Species = iris$Species
)
head(pca_df)
library(ggplot2)
ggplot(plda_df, aes(LD1, LD2)) + geom_point(aes(color = iris$Species[train]))
ggplot(pca_df, aes(pc1, pc2)) + geom_point(aes(color = Species))
data_pca_6 <- prcomp(data[,c(3:8)], center = TRUE,scale. = TRUE)
summary(data_pca_6)
data_pca_6 <- prcomp(data[,c(3:8)], center = TRUE,scale. = TRUE)
summary(data_pca_6)
pca_br_cancer_6 <- data.frame(
pc1 = data_pca$x[,1],
pc2 = data_pca$x[,2],
diagnosis = data$diagnosis
)
ggplot(pca_br_cancer_6, aes(pc1, pc2)) + geom_point(aes(color = diagnosis))
screeplot(data_pca, type = "l", npcs = 30, main = "Screeplot of the 30 PCs")
cumpro <- cumsum(data_pca$sdev^2 / sum(data_pca$sdev^2))
data_pca_6 <- prcomp(data[,c(3:8)], center = TRUE,scale. = TRUE)
summary(data_pca_6)
pca_br_cancer_6 <- data.frame(
pc1 = data_pca$x[,1],
pc2 = data_pca$x[,2],
diagnosis = data$diagnosis
)
screeplot(data_pca_6, type = "l", npcs = 15, main = "Screeplot of the 6 PCs")
ggplot(pca_br_cancer_6, aes(pc1, pc2)) + geom_point(aes(color = diagnosis))
data_pca_6 <- prcomp(data[,c(3:8)], center = TRUE,scale. = TRUE)
summary(data_pca_6)
pca_br_cancer_6 <- data.frame(
pc1 = data_pca$x[,1],
pc2 = data_pca$x[,2],
diagnosis = data$diagnosis
)
screeplot(data_pca_6, type = "l", npcs = 6, main = "Screeplot of the 6 PCs")
ggplot(pca_br_cancer_6, aes(pc1, pc2)) + geom_point(aes(color = diagnosis))
data <- read.csv('breast-cancer-data.csv')
data <- data[c(1:32)]
head(data)
ncol(data)
data_pca <- prcomp(data[,c(3:32)], center = TRUE,scale. = TRUE)
str(data_pca)
library(devtools)
library(ggbiplot)
ggbiplot(data_pca)
cumpro <- cumsum(data_pca$sdev^2 / sum(data_pca$sdev^2))
plot(cumpro[0:15], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
plot(data_pca$x[,1],data_pca$x[,2], xlab="PC1 (44.3%)", ylab = "PC2 (19%)", main = "PC1 / PC2 - plot")
pca_br_cancer <- data.frame(
pc1 = data_pca$x[,1],
pc2 = data_pca$x[,2],
diagnosis = data$diagnosis
)
pca_br_cancer
library(ggplot2)
summary(data_pca)
screeplot(data_pca, type = "l", npcs = 30, main = "Screeplot of the 30 PCs")
ggplot(pca_br_cancer, aes(pc1, pc2)) + geom_point(aes(color = diagnosis))
data_pca_6 <- prcomp(data[,c(3:8)], center = TRUE,scale. = TRUE)
summary(data_pca_6)
pca_br_cancer_6 <- data.frame(
pc1 = data_pca$x[,1],
pc2 = data_pca$x[,2],
diagnosis = data$diagnosis
)
screeplot(data_pca_6, type = "l", npcs = 6, main = "Screeplot of the 6 PCs")
ggplot(pca_br_cancer_6, aes(pc1, pc2)) + geom_point(aes(color = diagnosis))
data("iris")
head(iris)
nrow(iris)
library(MASS)
lda1 <- lda(Species ~ ., data = iris, prior = c(1,1,1)/3)
lda1$prior
lda1$counts
lda1$means
lda1$scaling
lda1$svd
prop = lda1$svd^2/sum(lda1$svd^2)
prop
lda2 <- lda(Species ~ ., data = iris, prior = c(1,1,1)/3, CV = TRUE)
head(lda2$class)
head(lda2$posterior, 3)
train <- sample(1:150, 75)
lda3 <- lda(Species ~ ., data = iris, prior = c(1,1,1)/3, subset = train)
lda3
plda = predict(object = lda1, # predictions
newdata = iris[-train, ])
plda
head(plda$class) # classification result
head(plda$posterior, 3)
head(plda$x, 3) # LD projections
plda_plot <- cbind(train, predict(lda3)$x)
plda_plot
plda_df <- data.frame(plda_plot)
plda_df
# plda_df$Species <- iris$Species
# plda_df
# iris[c(1:4)]
iris_pca <- prcomp(iris[,c(1:4)], center = TRUE,scale. = TRUE)
pca_df <- data.frame(
pc1 = iris_pca$x[,1],
pc2 = iris_pca$x[,2],
Species = iris$Species
)
head(pca_df)
library(ggplot2)
ggplot(plda_df, aes(LD1, LD2)) + geom_point(aes(color = iris$Species[train]))
ggplot(pca_df, aes(pc1, pc2)) + geom_point(aes(color = Species))
library(jsonlite)
library(dplyr)
data <- fromJSON("https://raw.githubusercontent.com/datameet/covid19/master/data/all_totals.json", flatten = TRUE)
# head(data$rows$key)
# class(data$rows$key[1])
# unlist(data$rows$key)
key_list <-data$row$key
# glimpse(data)
n <- length(unlist(key_list))
v <- c(1:n)
# v[v%%8 == 1]
dates <- unlist(key_list)[v[v%%8 == 1]]
length(dates)
date <- unlist(data$rows$key)
data_csv <- data.frame(
day_num = c(1: length(dates)),
date = as.Date(unique(dates))
)
head(data_csv)
n <- length(key_list)
v1 <- c(1:n)
# data$rows$value[v1[v1%%4 == 1]]
data_csv$active_cases <- data$rows$value[v1[v1%%4 == 1]]
data_csv$cured <- data$rows$value[v1[v1%%4 == 2]]
data_csv$death <- data$rows$value[v1[v1%%4 == 3]]
data_csv$total_confirmed_cases <- data$rows$value[v1[v1%%4 == 0]]
head(data_csv)
nrow(data_csv)
# active_cases_ts <- ts(data = data_csv$active_cases, frequency = 12, start=data_csv$date[1])
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,1), frequency = 365)
plot.ts(active_cases_ts)
start <- data_csv$day_num[data_csv$date == as.Date("2021-01-01")]
end <- data_csv$day_num[data_csv$date == as.Date("2022-01-01")]
active_cases_ts <- ts(data = data_csv$active_cases[c(start:nrow(data_csv))], start = c(2021,1,1), end = c(2022, 1, 1), frequency = 365)
# active_cases_ts <- ts(data = data_csv$active_cases)
# active_cases_ts
plot.ts(active_cases_ts)
death <- abs(data_csv$death[c(2: nrow(data_csv))] - data_csv$death[c(1: (nrow(data_csv) - 1))])
deaths_ts <- ts(data = death, start = c(2020,1,30), frequency = 365)
plot.ts(deaths_ts)
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020, 1, 30), frequency = 365)
forecast_covid_19 <- forecast::forecast(active_cases_ts, h=365)
plot.ts(forecast_covid_19)
plot(forecast_covid_19)
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts, n=3, star)
plot.ts(active_cases_ts_SMA3)
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,30), frequency = 365)
active_cases_ts_log = log(active_cases_ts)
active_cases_ts_log[active_cases_ts_log == 'NaN'] = 0
# active_cases_ts_log
acf(active_cases_ts_log)
pacf(diff(active_cases_ts_log))
fit <- arima(active_cases_ts_log, c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 265))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(active_cases_ts,2.718^pred$pred, log = "y", lty = c(1,3))
library(jsonlite)
library(dplyr)
data <- fromJSON("https://raw.githubusercontent.com/datameet/covid19/master/data/all_totals.json", flatten = TRUE)
# head(data$rows$key)
# class(data$rows$key[1])
# unlist(data$rows$key)
key_list <-data$row$key
# glimpse(data)
n <- length(unlist(key_list))
v <- c(1:n)
# v[v%%8 == 1]
dates <- unlist(key_list)[v[v%%8 == 1]]
length(dates)
date <- unlist(data$rows$key)
data_csv <- data.frame(
day_num = c(1: length(dates)),
date = as.Date(unique(dates))
)
head(data_csv)
n <- length(key_list)
v1 <- c(1:n)
# data$rows$value[v1[v1%%4 == 1]]
data_csv$active_cases <- data$rows$value[v1[v1%%4 == 1]]
data_csv$cured <- data$rows$value[v1[v1%%4 == 2]]
data_csv$death <- data$rows$value[v1[v1%%4 == 3]]
data_csv$total_confirmed_cases <- data$rows$value[v1[v1%%4 == 0]]
head(data_csv)
nrow(data_csv)
# active_cases_ts <- ts(data = data_csv$active_cases, frequency = 12, start=data_csv$date[1])
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,1), frequency = 365)
plot.ts(active_cases_ts)
start <- data_csv$day_num[data_csv$date == as.Date("2021-01-01")]
end <- data_csv$day_num[data_csv$date == as.Date("2022-01-01")]
active_cases_ts <- ts(data = data_csv$active_cases[c(start:nrow(data_csv))], start = c(2021,1,1), end = c(2022, 1, 1), frequency = 365)
# active_cases_ts <- ts(data = data_csv$active_cases)
# active_cases_ts
plot.ts(active_cases_ts)
death <- abs(data_csv$death[c(2: nrow(data_csv))] - data_csv$death[c(1: (nrow(data_csv) - 1))])
deaths_ts <- ts(data = death, start = c(2020,1,30), frequency = 365)
plot.ts(deaths_ts)
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020, 1, 30), frequency = 365)
forecast_covid_19 <- forecast::forecast(active_cases_ts, h=365)
plot.ts(forecast_covid_19)
plot(forecast_covid_19)
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts, start = (2020, 1, 30), frequency = 365)
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts, start = c(2020, 1, 30), frequency = 365)
plot.ts(active_cases_ts_SMA3)
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts)
plot.ts(active_cases_ts_SMA3)
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts)
plot.ts(active_cases_ts_SMA3)
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,30), frequency = 365)
active_cases_ts_log = log(active_cases_ts)
active_cases_ts_log[active_cases_ts_log == 'NaN'] = 0
# active_cases_ts_log
acf(active_cases_ts_log)
pacf(diff(active_cases_ts_log))
(fit <- arima(active_cases_ts_log, c(1, 1, 0), seasonal = list(order = c(0, 1, 1)), period = 365))
(fit <- arima(active_cases_ts_log, c(1, 1, 0), seasonal = list(order = c(0, 1, 1), period = 365)))
(fit <- arima(active_cases_ts_log, c(1, 1, 0), seasonal = list(order = c(0, 1, 1), period = 30)))
pred <- predict(fit, n.ahead = 2 * 365)
ts.plot(active_cases_ts,2.718^pred$pred, log = "y", lty = c(1,3))
(fit <- arima(active_cases_ts_log, c(1, 1, 0), seasonal = list(order = c(0, 1, 1), period = 350)))
(fit <- arima(active_cases_ts_log, c(1, 1, 0), seasonal = list(order = c(0, 1, 1), period = 200)))
pred <- predict(fit, n.ahead = 2 * 365)
ts.plot(active_cases_ts,2.718^pred$pred, log = "y", lty = c(1,3))
install.packages("pracma")
library(pracma)
library(pracma)
active_cases_ts_EMA = movavg(active_cases_ts, n = 10, type = "e")
library(jsonlite)
library(dplyr)
data <- fromJSON("https://raw.githubusercontent.com/datameet/covid19/master/data/all_totals.json", flatten = TRUE)
# head(data$rows$key)
# class(data$rows$key[1])
# unlist(data$rows$key)
key_list <-data$row$key
# glimpse(data)
n <- length(unlist(key_list))
v <- c(1:n)
# v[v%%8 == 1]
dates <- unlist(key_list)[v[v%%8 == 1]]
length(dates)
date <- unlist(data$rows$key)
data_csv <- data.frame(
day_num = c(1: length(dates)),
date = as.Date(unique(dates))
)
head(data_csv)
n <- length(key_list)
v1 <- c(1:n)
# data$rows$value[v1[v1%%4 == 1]]
data_csv$active_cases <- data$rows$value[v1[v1%%4 == 1]]
data_csv$cured <- data$rows$value[v1[v1%%4 == 2]]
data_csv$death <- data$rows$value[v1[v1%%4 == 3]]
data_csv$total_confirmed_cases <- data$rows$value[v1[v1%%4 == 0]]
head(data_csv)
nrow(data_csv)
# active_cases_ts <- ts(data = data_csv$active_cases, frequency = 12, start=data_csv$date[1])
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,1), frequency = 365)
plot.ts(active_cases_ts)
start <- data_csv$day_num[data_csv$date == as.Date("2021-01-01")]
end <- data_csv$day_num[data_csv$date == as.Date("2022-01-01")]
active_cases_ts <- ts(data = data_csv$active_cases[c(start:nrow(data_csv))], start = c(2021,1,1), end = c(2022, 1, 1), frequency = 365)
# active_cases_ts <- ts(data = data_csv$active_cases)
# active_cases_ts
plot.ts(active_cases_ts)
death <- abs(data_csv$death[c(2: nrow(data_csv))] - data_csv$death[c(1: (nrow(data_csv) - 1))])
deaths_ts <- ts(data = death, start = c(2020,1,30), frequency = 365)
plot.ts(deaths_ts)
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020, 1, 30), frequency = 365)
forecast_covid_19 <- forecast::forecast(active_cases_ts, h=365)
plot.ts(forecast_covid_19)
plot(forecast_covid_19)
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts, n = 20)
plot.ts(active_cases_ts_SMA3)
library(pracma)
active_cases_ts_EMA = movavg(active_cases_ts, n = 10, type = "e")
plot.ts(active_cases_ts_EMA)
# active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,30), frequency = 365)
active_cases_ts_log = log(active_cases_ts)
active_cases_ts_log[active_cases_ts_log == 'NaN'] = 0
plot.ts(active_cases_ts_log)
plot.ts(diff(active_cases_ts_log))
plot.ts(active_cases_ts_log)
plot.ts(diff(active_cases_ts_log))
# active_cases_ts_log
acf(diff(active_cases_ts_log))
# active_cases_ts_log
acf(diff(active_cases_ts_log))
pacf(diff(active_cases_ts_log)
pacf(diff(active_cases_ts_log))
# active_cases_ts_log
acf(diff(active_cases_ts_log))
pacf(diff(active_cases_ts_log))
# active_cases_ts_log
acf(diff(active_cases_ts_log))
(fit <- arima(active_cases_ts_log, c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 100)))
pred <- predict(fit, n.ahead = 2 * 100)
ts.plot(active_cases_ts,2.718^pred$pred, log = "y", lty = c(1,3))
ts.plot(active_cases_ts,2.718^pred$pred, lty = c(1,3))
pacf(diff(active_cases_ts_log))
library(pracma)
active_cases_ts_EMA = movavg(active_cases_ts, n = 10, type = "e")
plot.ts(active_cases_ts_EMA, start = c(2020, 1,30), frequency = 365)
library(pracma)
active_cases_ts_EMA = movavg(active_cases_ts, n = 10, type = "e")
plot.ts(active_cases_ts_EMA)
# active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,30), frequency = 365)
active_cases_ts_log = log(active_cases_ts)
active_cases_ts_log[active_cases_ts_log == 'NaN'] = 0
plot.ts(active_cases_ts_log)
plot.ts(diff(active_cases_ts_log))
# active_cases_ts_log
acf(diff(active_cases_ts_log))
pacf(diff(active_cases_ts_log))
data_csv$death[nrow(data_csv)]/data_csv$cured[nrow(data_csv)]
data_csv$death[nrow(data_csv)]
data_csv$cured[nrow(data_csv)]
data_csv$death[nrow(data_csv)]/data_csv$cured[nrow(data_csv)]
data_csv$death[nrow(data_csv)]/data_csv$cured[nrow(data_csv)]
data_csv$death[nrow(data_csv)]/data_csv$total_confirmed_cases[nrow(data_csv)]
data_csv$total_confirmed_cases[nrow(data_csv)]
tail(data_csv)
data_csv$death[nrow(data_csv)]/data_csv$total_confirmed_cases[nrow(data_csv)]
data <- read.csv('breast-cancer-data.csv')
data <- data[c(1:32)]
head(data)
ncol(data)
data_pca <- prcomp(data[,c(3:32)], center = TRUE,scale. = TRUE)
str(data_pca)
library(devtools)
library(ggbiplot)
ggbiplot(data_pca)
cumpro <- cumsum(data_pca$sdev^2 / sum(data_pca$sdev^2))
plot(cumpro[0:15], xlab = "PC #", ylab = "Amount of explained variance", main = "Cumulative variance plot")
plot(data_pca$x[,1],data_pca$x[,2], xlab="PC1 (44.3%)", ylab = "PC2 (19%)", main = "PC1 / PC2 - plot")
pca_br_cancer <- data.frame(
pc1 = data_pca$x[,1],
pc2 = data_pca$x[,2],
diagnosis = data$diagnosis
)
pca_br_cancer
library(ggplot2)
summary(data_pca)
screeplot(data_pca, type = "l", npcs = 30, main = "Screeplot of the 30 PCs")
ggplot(pca_br_cancer, aes(pc1, pc2)) + geom_point(aes(color = diagnosis))
data_pca_6 <- prcomp(data[,c(3:8)], center = TRUE,scale. = TRUE)
summary(data_pca_6)
pca_br_cancer_6 <- data.frame(
pc1 = data_pca$x[,1],
pc2 = data_pca$x[,2],
diagnosis = data$diagnosis
)
ggbiplot(data_pca_6)
screeplot(data_pca_6, type = "l", npcs = 6, main = "Screeplot of the 6 PCs")
ggplot(pca_br_cancer_6, aes(pc1, pc2)) + geom_point(aes(color = diagnosis))
data("iris")
head(iris)
nrow(iris)
library(MASS)
lda1 <- lda(Species ~ ., data = iris, prior = c(1,1,1)/3)
lda1$prior
lda1$counts
lda1$means
lda1$scaling
lda1$svd
prop = lda1$svd^2/sum(lda1$svd^2)
prop
lda2 <- lda(Species ~ ., data = iris, prior = c(1,1,1)/3, CV = TRUE)
head(lda2$class)
head(lda2$posterior, 3)
train <- sample(1:150, 75)
lda3 <- lda(Species ~ ., data = iris, prior = c(1,1,1)/3, subset = train)
lda3
plda = predict(object = lda1, # predictions
newdata = iris[-train, ])
plda
head(plda$class) # classification result
head(plda$posterior, 3)
head(plda$x, 3) # LD projections
plda_plot <- cbind(train, predict(lda3)$x)
plda_plot
plda_df <- data.frame(plda_plot)
plda_df
# plda_df$Species <- iris$Species
# plda_df
# iris[c(1:4)]
iris_pca <- prcomp(iris[,c(1:4)], center = TRUE,scale. = TRUE)
pca_df <- data.frame(
pc1 = iris_pca$x[,1],
pc2 = iris_pca$x[,2],
Species = iris$Species
)
head(pca_df)
library(ggplot2)
ggplot(plda_df, aes(LD1, LD2)) + geom_point(aes(color = iris$Species[train]))
ggplot(pca_df, aes(pc1, pc2)) + geom_point(aes(color = Species))
(fit <- arima(active_cases_ts_log, c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 100)))
pred <- predict(fit, n.ahead = 2 * 365)
ts.plot(active_cases_ts,2.718^pred$pred, lty = c(1,3))
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020, 1, 30), frequency = 365)
forecast_covid_19 <- forecast::forecast(active_cases_ts, h=365)
plot.ts(forecast_covid_19)
plot(forecast_covid_19)
(fit <- arima(active_cases_ts_log, c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 100)))
pred <- predict(fit, n.ahead = 2 * 365)
ts.plot(active_cases_ts, pred, lty = c(1,3))
(fit <- arima(diff(active_cases_ts_log), c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 100)))
pred <- predict(fit, n.ahead = 2 * 365)
ts.plot(active_cases_ts,2.718^pred$pred, lty = c(1,3))
(fit <- arima(active_cases_ts, c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 100)))
pred <- predict(fit, n.ahead = 2 * 365)
ts.plot(active_cases_ts,pred$pred, lty = c(1,3))
# active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,30), frequency = 365)
active_cases_ts_log = log(active_cases_ts)
active_cases_ts_log[active_cases_ts_log == 'NaN'] = 0
plot.ts(active_cases_ts_log)
plot.ts(diff(active_cases_ts_log))
# active_cases_ts_log
acf((active_cases_ts_log))
pacf((active_cases_ts_log))
(fit <- arima(active_cases_ts_log, c(1, 1, 1), seasonal = list(order = c(1, 1, 1), period = 100)))
(fit <- arima(active_cases_ts_log, c(1, 1, 1), seasonal = list(order = c(1, 1, 1), period = 100)))
# active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,30), frequency = 365)
active_cases_ts_log = log(active_cases_ts)
active_cases_ts_log[active_cases_ts_log == 'NaN'] = 0
plot.ts(active_cases_ts_log)
plot.ts(diff(active_cases_ts_log))
# active_cases_ts_log
acf((active_cases_ts_log))
pacf((active_cases_ts_log))
(fit <- arima(active_cases_ts_log, c(1, 1, 1), seasonal = list(order = c(1, 1, 1), period = 100)))
(fit <- arima(active_cases_ts_log, c(1, 0, 1), seasonal = list(order = c(1, 0, 1), period = 100)))
# active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,30), frequency = 365)
active_cases_ts_log = log(active_cases_ts)
active_cases_ts_log[active_cases_ts_log == 'NaN'] = 0
plot.ts(active_cases_ts_log)
plot.ts(diff(diff(active_cases_ts_log)))
# active_cases_ts_log
acf((active_cases_ts_log))
pacf((active_cases_ts_log))
# active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020,1,30), frequency = 365)
active_cases_ts_log = log(active_cases_ts)
active_cases_ts_log[active_cases_ts_log == 'NaN'] = 0
plot.ts(active_cases_ts_log)
plot.ts(diff(active_cases_ts_log))
# active_cases_ts_log
acf(ts(diff(active_cases_ts_log)))
pacf(ts(diff(active_cases_ts_log)))
(fit <- arima(active_cases_ts_log, c(0, 1, 2), seasonal = list(order = c(0, 1, 2), period = 100)))
pred <- predict(fit, n.ahead = 365)
ts.plot(active_cases_ts,2.718^pred$pred, lty = c(1,3))
(fit <- arima(active_cases_ts_log, c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 100)))
pred <- predict(fit, n.ahead = 365)
ts.plot(active_cases_ts,2.718^pred$pred, lty = c(1,3))
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts, n = 20)
pred <- predict(active_cases_ts_SMA3, n.ahead = 365)
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts, n = 20)
pred <- predict(active_cases_ts_SMA3, n.ahead = 365)
active_cases_ts <- ts(data = data_csv$active_cases, start = c(2020, 1, 30), frequency = 365)
forecast_covid_19 <- forecast::forecast(active_cases_ts, h=365)
plot.ts(forecast_covid_19)
plot(forecast_covid_19)
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts, n = 20)
pred <- forecast::forecast(active_cases_ts_SMA3, h = 365)
plot.ts(pred)
# plot.ts(active_cases_ts_SMA3)
library(pracma)
active_cases_ts_EMA = movavg(active_cases_ts, n = 10, type = "e")
pred <- forecast::forecast(active_cases_ts_EMA, h = 365)
plot.ts(pred)
# plot.ts(active_cases_ts_EMA)
library(TTR)
active_cases_ts_SMA3 <- SMA(active_cases_ts, n = 20)
plot.ts(active_cases_ts_SMA3)
library(pracma)
active_cases_ts_EMA = movavg(active_cases_ts, n = 10, type = "e")
plot.ts(active_cases_ts_EMA)
library(pracma)
active_cases_ts_EMA = movavg(active_cases_ts, n = 20, type = "e")
plot.ts(active_cases_ts_EMA)
